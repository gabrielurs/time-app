import React, { useEffect, useState } from "react";
import axios from "axios";
import "./css/animation.css";

const Home = () => {
    const [city, setCity] = useState("");
    const [country, setCountry] = useState("");
    const [loading, setLoading] = useState(true);
    const [weather, setWeather] = useState([]);
    const [generalWeather, setGeneralWeather] = useState([]);
    const [days, setDays] = useState([]);
    const [hour, setHour] = useState("");
    const [iconsDays, setIconsDays] = useState([]);
    const [cityInput, setCityInput] = useState("");
    const [countryInput, setCountryInput] = useState("");

    const today = new Date();

    const options = {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
    };

    const icons = {
        atm_instability: (
            <svg
                id="Capa_1"
                data-name="Capa 1"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 400 400"
            >
                <polygon points="167.71 359.17 168.81 356.67 207.68 269.43 169.92 269.33 202.07 194.65 205.17 194.65 183.41 259.66 223.96 259.96 167.71 359.17" />
                <path d="M312.46,122.23c.11-1.26.17-2.52.17-3.77a42.85,42.85,0,0,0-42.8-42.79,42.4,42.4,0,0,0-22.51,6.41c-4.16-24.36-26.49-42.6-52.63-41.17-24.88,1.24-44.58,19.45-47.82,42.78A41.51,41.51,0,0,0,133,81.3a42.87,42.87,0,0,0-42.8,42.8q0,.77.06,1.56c-12,3.26-29.11,10.16-29.08,34.62,0,18.15,15.12,33.75,35.68,34.73l6.31-9.72c-.75,0-1.59,0-2.19.07l-1.53,0c-15.59,0-28.3-11.27-28.31-25.11,0-16.54,9-21.88,25.65-26l3.74-1.42.11-3.77-.19-2a20.46,20.46,0,0,1-.27-2.94A32.86,32.86,0,0,1,133,91.26a32.17,32.17,0,0,1,16,4.33l7.56,4.22-.15-8.66C156,69.66,173.08,52,195.18,50.86l2.17,0c21.76,0,39.59,16.47,40.65,37.54,0,.76,0,1.51-.11,3.45l-.45,12.79,9-9.13a32.82,32.82,0,0,1,56.24,23A33.89,33.89,0,0,1,302,125l-1,5,5,.88c12.82,2.24,22.2,12.19,22.79,24.17s-7.68,25.7-20.26,29.65l3.32,9.28c15.87-5.29,27.77-21.69,26.88-39.42C338,139.49,327.44,126.74,312.46,122.23Z" />
                <path d="M129.71,298.35c0,1.2-1.37,2.16-3.07,2.16h0c-1.7,0-3.07-1-3.07-2.16V178.81c0-1.19,1.37-2.15,3.07-2.15h0c1.7,0,3.07,1,3.07,2.15Z" />
                <path d="M157.76,316.72c0,1.2-1.37,2.18-3.07,2.18h0c-1.7,0-3.07-1-3.07-2.18V197.19c0-1.21,1.37-2.18,3.07-2.18h0c1.7,0,3.07,1,3.07,2.18Z" />
                <path d="M233.61,328.13c0,1.2-1.38,2.16-3.07,2.16h0c-1.7,0-3.07-1-3.07-2.16V208.59c0-1.18,1.37-2.16,3.07-2.16h0c1.69,0,3.07,1,3.07,2.16Z" />
                <path d="M265.42,290.61c0,1.2-1.39,2.17-3.07,2.17h0c-1.68,0-3.06-1-3.06-2.17V171.07c0-1.17,1.38-2.15,3.06-2.15h0c1.68,0,3.07,1,3.07,2.15Z" />
            </svg>
        ),
        atm_seeing: (
            <svg
                id="Capa_1"
                data-name="Capa 1"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 400 400"
            >
                <path d="M216.6,106.85a88.59,88.59,0,0,1-20.53,158.94,91.59,91.59,0,0,1-12.15,2.91A88.58,88.58,0,1,0,216.6,106.85Z" />
                <polygon points="141.01 290.97 118.51 281.39 97.83 294.45 100.04 270.09 81.22 254.47 105.08 249.07 114.08 226.31 126.65 247.29 151.05 248.87 134.97 267.3 141.01 290.97" />
                <polygon points="127.29 179.5 109.37 171.87 92.94 182.27 94.68 162.9 79.7 150.45 98.68 146.16 105.85 128.05 115.85 144.72 135.26 145.99 122.48 160.67 127.29 179.5" />
                <polygon points="207.76 209.04 192.34 202.49 178.21 211.41 179.69 194.75 166.82 184.04 183.15 180.37 189.31 164.79 197.91 179.16 214.62 180.23 203.62 192.85 207.76 209.04" />
            </svg>
        ),
        clear: (
            <svg
                id="Capa_1"
                data-name="Capa 1"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 400 400"
            >
                <path d="M200.47,271.55a66.76,66.76,0,1,1,66.76-66.76A66.83,66.83,0,0,1,200.47,271.55Zm0-121.88a55.12,55.12,0,1,0,55.12,55.12A55.17,55.17,0,0,0,200.47,149.67Z" />
                <path d="M148.49,146.61a4.65,4.65,0,0,1-.42,6.55h0a4.65,4.65,0,0,1-6.55-.43L107,113.29a4.65,4.65,0,0,1,.43-6.54h0a4.64,4.64,0,0,1,6.55.43Z" />
                <path d="M205.29,125.29A4.62,4.62,0,0,1,200.7,130h0a4.63,4.63,0,0,1-4.68-4.61L195.65,73a4.64,4.64,0,0,1,4.59-4.68h0a4.63,4.63,0,0,1,4.68,4.62Z" />
                <path d="M121.21,192.05a4.64,4.64,0,0,1,4.24,5h0a4.64,4.64,0,0,1-5,4.25l-52.23-4.25a4.64,4.64,0,0,1-4.24-5h0a4.66,4.66,0,0,1,5-4.27Z" />
                <path d="M129.62,241.69a4.63,4.63,0,0,1,6.4,1.44h0a4.64,4.64,0,0,1-1.44,6.4l-44.3,28a4.61,4.61,0,0,1-6.39-1.44h0a4.62,4.62,0,0,1,1.44-6.4Z" />
                <path d="M169.19,276.22a4.65,4.65,0,0,1,6-2.71h0a4.67,4.67,0,0,1,2.72,6l-18.47,49a4.64,4.64,0,0,1-6,2.7h0a4.63,4.63,0,0,1-2.73-6Z" />
                <path d="M269.28,251.51a4.62,4.62,0,0,1-1.95-6.26h0a4.61,4.61,0,0,1,6.26-1.94L320,267.69a4.61,4.61,0,0,1,1.94,6.25h0a4.64,4.64,0,0,1-6.28,2Z" />
                <path d="M279.89,195a4.63,4.63,0,0,1-5.14-4.05h0a4.63,4.63,0,0,1,4.07-5.16l52-6.09a4.62,4.62,0,0,1,5.14,4.06h0a4.65,4.65,0,0,1-4.07,5.17Z" />
                <path d="M245.74,325.54a4.64,4.64,0,0,1-2.82,5.93h0a4.64,4.64,0,0,1-5.91-2.84L219.58,279.2a4.63,4.63,0,0,1,2.83-5.91h0a4.62,4.62,0,0,1,5.92,2.83Z" />
                <path d="M254.31,147.9a4.64,4.64,0,0,1-6.51.82h0a4.64,4.64,0,0,1-.8-6.51l32.27-41.31a4.62,4.62,0,0,1,6.5-.81h0a4.65,4.65,0,0,1,.79,6.53Z" />
            </svg>
        ),
        cloudy: (
            <svg
                id="Capa_1"
                data-name="Capa 1"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 400 400"
            >
                <path d="M284.67,123.72a37.89,37.89,0,0,0-35.94,50,40.74,40.74,0,0,0-31.57,4.92c-4-23.46-25.5-41-50.67-39.63-24,1.18-42.94,18.72-46,41.21a39.39,39.39,0,0,0-13.33-2.33,41.28,41.28,0,0,0-41.23,41.22c0,.49,0,1,.07,1.5-11.52,3.13-28,9.79-28,33.33,0,17.08,13.89,31.76,33,33.32v.13l.49-.08c.3,0,.59.07.89.08l.13-.2c5.51-.54,25.28-1,43.8,14.25,12.57,10.36,27,13.15,41,14.37,3,.26,5.84.39,8.6.39,13.46,0,24.2-3.07,30.12-8.74,16.86-16.1,36.44-9.88,53.69-4.4,13.93,4.4,28.31,9,33.43-5.6a21.34,21.34,0,0,0,.63-12.91c13-6.39,22.32-20.67,21.54-36.08-.71-14.56-10.87-26.82-25.3-31.17.1-1.21.16-2.41.16-3.62a41.08,41.08,0,0,0-2.81-14.83,38,38,0,1,0,7.42-75.17Zm-14.2,90a32.1,32.1,0,0,1-.64,6.32l-1,4.83,4.84.84c12.35,2.17,21.37,11.74,21.94,23.27.54,10.74-6.34,22.75-17,27.49a14.61,14.61,0,0,0-15.29-3c-5.42,2.26-8.58,6.75-8.43,12,.11,4.4,2.52,8.31,5.85,9.51a6.3,6.3,0,0,0,7-2.08L262.9,289c-.44-.14-1.53-1.54-1.61-3.58-.08-1.86.65-4.4,4.51-6a8.33,8.33,0,0,1,8.78,2c3.45,3.24,4.35,8.47,2.42,14-2.8,8-9.2,6.77-25.47,1.62-17.07-5.43-40.45-12.84-60,5.89-5.73,5.48-18.32,8-33.75,6.59-12.89-1.13-26.33-3.47-37.37-12.87-14.25-12.13-28.15-15.25-37.58-15.67a47.44,47.44,0,0,1,33.08,3.92c15.5,7.85,34.18,15.25,49.62,15.25,8.76,0,16.48-2.38,21.95-8.43,12.09-13.33,26.57-11.84,39.29-10.55,11.36,1.18,23.1,2.36,27.12-10.44,2.18-6.95.64-13.47-4.18-17.88-5.05-4.6-13-6.11-19-3.6-6.79,2.84-7.42,7.48-7.36,9.34a10,10,0,0,0,6.72,8.81,7.79,7.79,0,0,0,8.81-2.19L234,261c-.2.23-.65.76-1.83.35a3.74,3.74,0,0,1-2.48-3c-.05-1.65,2.39-2.83,3.45-3.28,3.72-1.55,9-.52,12.22,2.43,2.1,1.92,4.22,5.42,2.38,11.25-2.33,7.5-8.28,7.24-20.35,6-12.85-1.31-30.42-3.12-44.67,12.6-13.1,14.44-45.68,1-63.94-8.24a54.71,54.71,0,0,0-47.07-1.24,29.13,29.13,0,0,1-13-4.51c7.71-4.84,31.12-16.78,56.87-2.68,15.53,8.5,28.74,11.4,39.54,11.4,15.75,0,26.35-6.17,31.47-10.07,7.92-6,8.27-16.81,4.58-23.91C188,242,180.75,236.61,170.09,240a11.18,11.18,0,0,0-7.76,13.51c1.28,5.24,6.37,9.89,14.87,8.38l-1.1-6.29c-4.71.79-7-1.33-7.56-3.61a4.86,4.86,0,0,1,3.48-5.9c8.39-2.69,12.22,2.62,13.47,5,2.51,4.86,2.16,12.13-2.78,15.89-7.63,5.81-29.16,17.27-64.07-1.87-30.53-16.7-58.2-.59-65,4A22.46,22.46,0,0,1,47.54,254c0-15.89,8.66-21.06,24.68-25l3.62-1.37.1-3.64-.18-2a19.82,19.82,0,0,1-.27-2.81,31.66,31.66,0,0,1,31.63-31.62,31.08,31.08,0,0,1,15.34,4.15l7.29,4.08-.14-8.34c-.35-20.7,16-37.74,37.35-38.78l2.08-.07c21,0,38.14,15.88,39.15,36.18a32.17,32.17,0,0,1-.1,3.3l-.43,12.33,8.65-8.81a31.48,31.48,0,0,1,41.65-3,38.21,38.21,0,0,0,3.39,3A31.52,31.52,0,0,1,270.47,213.72Zm14.2-20.43a31.66,31.66,0,0,1-11.41-2.16,41.31,41.31,0,0,0-16.38-14.4,31.61,31.61,0,1,1,27.79,16.56Z" />
                <path d="M251,132a2.64,2.64,0,0,0,4-3.48L235.32,106a2.65,2.65,0,0,0-4,3.49Z" />
                <path d="M284.81,119a2.64,2.64,0,0,0,2.62-2.66l-.21-29.91a2.65,2.65,0,1,0-5.29,0l.21,29.91A2.65,2.65,0,0,0,284.81,119Z" />
                <path d="M209.2,157.26,239,159.7a2.65,2.65,0,0,0,.42-5.29L209.63,152a2.67,2.67,0,0,0-2.86,2.44A2.63,2.63,0,0,0,209.2,157.26Z" />
                <path d="M352.88,197.58l-26.46-13.91a2.65,2.65,0,1,0-2.47,4.68l26.46,13.93a2.65,2.65,0,0,0,2.47-4.7Z" />
                <path d="M359.09,147.34l-29.69,3.48a2.65,2.65,0,1,0,.61,5.26l29.71-3.47a2.65,2.65,0,0,0-.63-5.27Z" />
                <path d="M300.57,202.4a2.64,2.64,0,0,0-5,1.76l9.94,28.21a2.65,2.65,0,1,0,5-1.76Z" />
                <path d="M315.41,129.21l18.41-23.56a2.65,2.65,0,1,0-4.17-3.26L311.23,126a2.65,2.65,0,1,0,4.18,3.25Z" />
            </svg>
        ),
        mixed: (
            <svg
                id="Capa_1"
                data-name="Capa 1"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 400 400"
            >
                <path d="M217.62,335c-14.3-19.11-13.34-52.07-14-41.51C201.81,321,191,335,191,335a12.2,12.2,0,0,0-1.42,5.65c0,7.28,6.6,13.2,14.74,13.2S219,347.88,219,340.6a12,12,0,0,0-1.44-5.65Z" />
                <path d="M292.48,90.89a42.71,42.71,0,0,0-36.64,64.76,46.09,46.09,0,0,0-34,5.89c-4.5-26.33-28.63-46-56.9-44.49-26.89,1.34-48.2,21-51.69,46.26a44.41,44.41,0,0,0-15-2.61A46.33,46.33,0,0,0,52,207c0,.55,0,1.09.08,1.68-12.94,3.52-31.48,11-31.44,37.42,0,19.64,16.33,36.5,38.57,37.55L66,273.12c-.81,0-1.74.05-2.36.09l-1.65,0c-16.87,0-30.61-12.2-30.62-27.17,0-17.86,9.73-23.65,27.73-28.12l4-1.54.12-4.08-.2-2.19a24,24,0,0,1-.31-3.17,35.55,35.55,0,0,1,35.52-35.51,35,35,0,0,1,17.23,4.67l8.17,4.58-.15-9.36c-.41-23.24,18-42.36,41.93-43.55l2.33-.06c23.52,0,42.83,17.82,44,40.6a35.13,35.13,0,0,1-.11,3.71l-.48,13.83,9.71-9.88A35.47,35.47,0,0,1,281,208l-1.09,5.41,5.44,1c13.87,2.42,24,13.17,24.62,26.12s-8.31,27.78-21.89,32l3.59,10c17.15-5.7,30-23.42,29.06-42.6-.81-16.34-12.22-30.11-28.43-35,.13-1.35.2-2.72.2-4.07A45.92,45.92,0,0,0,285,175.76a42.77,42.77,0,1,0,7.49-84.87Zm0,78.11a35.33,35.33,0,1,1,35.32-35.33A35.35,35.35,0,0,1,292.48,169Z" />
                <path d="M254.71,100.31a3,3,0,1,0,4.46-3.91L237.06,71.12A3,3,0,0,0,232.57,75Z" />
                <path d="M292.63,85.72a2.94,2.94,0,0,0,2.93-3l-.23-33.58a3,3,0,1,0-5.93,0l.23,33.58A3,3,0,0,0,292.63,85.72Z" />
                <path d="M207.74,128.72l33.45,2.73a3,3,0,0,0,.49-5.94l-33.47-2.73a3,3,0,0,0-.47,5.94Z" />
                <path d="M369.06,174l-29.72-15.62a3,3,0,1,0-2.77,5.26l29.71,15.63a3,3,0,0,0,2.78-5.27Z" />
                <path d="M376,117.58l-33.34,3.9a3,3,0,0,0,.68,5.91l33.36-3.91a3,3,0,1,0-.7-5.9Z" />
                <path d="M306.54,177.58a3,3,0,0,0-1.82,3.79L315.89,213a3,3,0,1,0,5.6-2l-11.16-31.68A3,3,0,0,0,306.54,177.58Z" />
                <path d="M327,97.22l20.66-26.45a3,3,0,0,0-.5-4.17,3,3,0,0,0-4.19.52L322.3,93.58A3,3,0,1,0,327,97.22Z" />
                <path d="M116.93,325.53c-17.87-23.93-16.68-65.16-17.53-52-2.24,34.47-15.82,52-15.82,52a15.17,15.17,0,0,0-1.78,7.05c0,9.12,8.26,16.53,18.45,16.53s18.45-7.41,18.45-16.53a14.83,14.83,0,0,0-1.8-7.05Z" />
                <path d="M173.66,293.05c-15.59-20.9-14.55-56.88-15.3-45.36-2,30.09-13.81,45.36-13.81,45.36a13.16,13.16,0,0,0-1.55,6.17c0,8,7.2,14.42,16.11,14.42s16.11-6.46,16.11-14.42a13.3,13.3,0,0,0-1.57-6.17Z" />
                <path d="M226.52,252.66c-1.14,17.34-8,26.14-8,26.14a7.56,7.56,0,0,0-.9,3.54c0,4.59,4.15,8.32,9.29,8.32s9.26-3.73,9.26-8.32a7.44,7.44,0,0,0-.89-3.54C226.34,266.76,227,246,226.52,252.66Z" />
            </svg>
        ),
        rain: (
            <svg
                id="Capa_1"
                data-name="Capa 1"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 400 400"
            >
                <path d="M324.13,168.93c.12-1.39.19-2.77.19-4.15a47.31,47.31,0,0,0-47.26-47.24,46.65,46.65,0,0,0-24.83,7.07c-4.6-26.89-29.24-47-58.09-45.43-27.46,1.36-49.21,21.46-52.77,47.24a45.33,45.33,0,0,0-15.29-2.67A47.3,47.3,0,0,0,78.84,171c0,.56,0,1.12.06,1.72-13.2,3.59-32.12,11.22-32.1,38.2,0,20.05,16.69,37.26,39.39,38.34l7-10.72c-.82,0-1.76,0-2.41.07l-1.69,0c-17.22,0-31.23-12.45-31.24-27.75,0-18.22,9.92-24.13,28.3-28.69l4.13-1.58.12-4.17-.21-2.24a24.54,24.54,0,0,1-.31-3.23,36.3,36.3,0,0,1,36.25-36.25,35.7,35.7,0,0,1,17.61,4.77l8.34,4.67-.17-9.56c-.41-23.72,18.42-43.25,42.83-44.46l2.38-.07c24,0,43.71,18.2,44.87,41.46a34.82,34.82,0,0,1-.12,3.79l-.5,14.13,9.93-10.09a35.93,35.93,0,0,1,25.81-10.86,36.31,36.31,0,0,1,36.27,36.25,36.81,36.81,0,0,1-.74,7.24l-1.11,5.53,5.54,1c14.16,2.48,24.5,13.45,25.15,26.67s-8.49,28.36-22.35,32.73l3.66,10.23c17.52-5.82,30.65-23.92,29.67-43.5C352.33,188,340.67,173.91,324.13,168.93Z" />
                <path d="M145.08,292h0c-18.25-24.43-17-66.52-17.89-53-2.29,35.18-16.16,53-16.16,53h0a15.44,15.44,0,0,0-1.8,7.21c0,9.32,8.41,16.87,18.82,16.87s18.83-7.55,18.83-16.87A15.22,15.22,0,0,0,145.08,292Z" />
                <path d="M203,258.89h0c-15.94-21.35-14.89-58.09-15.64-46.33-2,30.73-14.09,46.33-14.09,46.33h0a13.49,13.49,0,0,0-1.6,6.28c0,8.13,7.37,14.73,16.44,14.73s16.46-6.6,16.46-14.73A13.6,13.6,0,0,0,203,258.89Z" />
                <path d="M247.89,301.67h0c-14.58-19.53-13.59-53.17-14.31-42.39-1.81,28.11-12.89,42.39-12.89,42.39h0a12.21,12.21,0,0,0-1.45,5.76c0,7.44,6.72,13.48,15.06,13.48s15-6,15-13.48A12.33,12.33,0,0,0,247.89,301.67Z" />
                <path d="M266,244.32h0c-9.16-12.28-8.55-33.45-9-26.67-1.16,17.69-8.12,26.67-8.12,26.67h0a7.55,7.55,0,0,0-.92,3.62c0,4.7,4.24,8.5,9.48,8.5s9.47-3.8,9.47-8.5A7.55,7.55,0,0,0,266,244.32Z" />
            </svg>
        ),
        snow: (
            <svg
                id="Capa_1"
                data-name="Capa 1"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 400 400"
            >
                <path d="M325,144.46c.11-1.4.18-2.79.18-4.18a47.62,47.62,0,0,0-47.57-47.56,47,47,0,0,0-25,7.12C248,72.75,223.15,52.49,194.1,54.09c-27.64,1.37-49.56,21.6-53.14,47.56A45.88,45.88,0,0,0,125.56,99,47.62,47.62,0,0,0,78,146.54c0,.58,0,1.13.06,1.74-13.28,3.62-32.36,11.3-32.32,38.47,0,20.19,16.8,37.53,39.67,38.6l7-10.8-2.42.08-1.7,0c-17.35,0-31.47-12.54-31.48-27.92,0-18.36,10-24.31,28.49-28.9l4.16-1.59.12-4.21-.2-2.24a23.66,23.66,0,0,1-.31-3.27,36.55,36.55,0,0,1,36.5-36.49,36,36,0,0,1,17.72,4.79l8.42,4.72-.17-9.64c-.41-23.88,18.53-43.55,43.12-44.78l2.39,0c24.19,0,44,18.31,45.19,41.75,0,.83,0,1.67-.12,3.8l-.49,14.23,10-10.15a36.48,36.48,0,0,1,62.52,25.56,36.59,36.59,0,0,1-.75,7.3l-1.12,5.56,5.59,1c14.26,2.49,24.67,13.53,25.32,26.84s-8.53,28.56-22.52,33l3.7,10.3c17.63-5.86,30.86-24.09,29.88-43.8C353.39,163.64,341.64,149.48,325,144.46Z" />
                <path d="M108.33,247.5h3.2v-3.15h-3.2Zm12.49,4.27,2.27,2.24,2.27-2.24-2.27-2.28Zm-17-21.31-2.25,2.29,2.27,2.22,2.24-2.22Zm30.84,17h3.21v-3.15h-3.21Zm-23.33-29.79h-3.18v3.18h3.18Zm26.77,0h-3.2v3.18h3.2Zm-12.85-4.38L123,211.07l-2.27,2.26,2.27,2.26Zm15.81,24.17-2-4.9,2-4.65-3.75,3.91h-6.12l2.22-3.42-3.93-.74,4.32-4.39h5.32l-4.86-1.77-1.85-4.87v5.4l-4.24,4.42-.64-4.2L124,224.68v-6l3.86-4-4.6,2.29-4.81-2.11,3.86,3.83v6l-3.59-2.15-.59,4-4.33-4.42v-5.4l-1.69,4.87-5,1.93h5.39l4.32,4.23-4.43,1,2.73,3.19H109L105.17,228l1.85,4.8-1.85,4.75,3.84-4h6.12L112.4,237l4.43.7-4.32,4.31h-5.39l5,1.74,1.63,4.81.06-5.3,4.16-4.17.76,4.29,3.59-2.66v6.13l-3.86,3.76,4.7-2.07,4.6,2.07L124,246.89v-6.13l3.53,2.41.64-4.2,4.32,4.33.09,5.3,1.56-4.7,5-1.85h-5.32l-4.32-4.15,4.17-1.22-2.46-3.2h6.12Zm-22.61-8.08,2.63,2.44h-3.52Zm.18,6.72-1.07-2.66h3.52Zm3.68,2.17-2.38-1,2.38-2.6Zm0-7.68L120,228.19l2.38-1.06Zm5.44-1.21.92,2.44h-3.52Zm-3.66-2.29,2.52,1.06-2.52,2.44Zm0,11.26v-3.66l2.52,2.43Zm3.52-2.25-2.46-2.66h3.75Zm14.46-5.74-2.26,2.24,2.26,2.26,2.28-2.26Z" />
                <path d="M236.91,230.49h4.16v-4.1h-4.16ZM253.12,236l2.93,2.89,3-2.89-3-3Zm-22-27.63-2.92,3,3,2.88,2.89-2.88Zm40,22.11h4.16v-4.1h-4.16Zm-30.26-38.66h-4.12V196h4.12Zm34.72,0H271.4V196h4.15Zm-16.67-5.67-2.95-2.92L253,186.16l2.93,2.94Zm20.51,31.35-2.66-6.37,2.66-6-4.87,5.08h-7.93l2.86-4.46-5.09-.95,5.62-5.69h6.89l-6.32-2.3-2.39-6.31v7l-5.48,5.72-.84-5.43-4.57,3.12v-7.73l5-5.21-6,3-6.23-2.74,5,5v7.73l-4.63-2.81-.78,5.12L244,197.49v-7l-2.19,6.31-6.5,2.51h7l5.6,5.48-5.75,1.26,3.54,4.15H237.8l-5-5.08,2.41,6.21-2.41,6.17,5-5.22h7.93l-3.54,4.61,5.75.91-5.6,5.6h-7l6.5,2.25,2.1,6.25L244,225l5.4-5.4,1,5.58,4.63-3.45v7.94l-5,4.88,6.07-2.68,6,2.68-4.87-4.88v-7.94l4.57,3.11.84-5.42,5.58,5.58.12,6.9,2-6.09,6.46-2.41H270L264.36,218l5.41-1.59-3.18-4.15h7.93ZM250.07,207l3.39,3.17h-4.55Zm.22,8.68-1.38-3.43h4.55Zm4.77,2.85L252,217.29l3.08-3.39Zm0-10L252,205.42l3.08-1.36Zm7.08-1.56,1.18,3.17h-4.58Zm-4.75-3,3.26,1.36-3.26,3.18Zm0,14.6V213.9l3.26,3.18Zm4.55-2.94-3.2-3.43h4.88Zm18.76-7.43-2.95,2.91,2.95,2.92,2.94-2.92Z" />
                <path d="M137.27,337.58h4.18v-4.11h-4.18Zm16.22,5.51,2.94,2.91,2.95-2.91-2.95-2.94Zm-22-27.62-2.92,2.95,2.95,2.89,2.91-2.89Zm40,22.11h4.15v-4.11h-4.15ZM141.2,298.91h-4.12v4.16h4.12Zm34.72,0h-4.15v4.16h4.15Zm-16.67-5.67-2.95-2.91-2.93,2.91,2.93,2.94Zm20.52,31.36-2.67-6.37,2.67-6-4.88,5.07H167l2.86-4.46-5.09-.95,5.61-5.7h6.89l-6.32-2.29-2.38-6.32v7L163,310.3l-.84-5.44L157.62,308v-7.72l5-5.21-6,3-6.23-2.73,5,5V308l-4.64-2.81L150,310.3l-5.61-5.72v-7l-2.19,6.32-6.5,2.51h7l5.6,5.48-5.76,1.26,3.53,4.15h-7.93l-5-5.07,2.41,6.19-2.41,6.18,5-5.22h7.93L142.56,324l5.76.89-5.6,5.6h-7l6.5,2.25,2.09,6.25.1-6.91,5.4-5.39,1,5.58,4.64-3.45v7.95l-5,4.86,6.09-2.67,6,2.67-4.89-4.86v-7.95l4.58,3.11.84-5.43,5.59,5.58.12,6.91,2-6.1,6.45-2.4h-6.89l-5.61-5.38,5.41-1.59L167,319.38h7.93Zm-29.33-10.48,3.39,3.18h-4.56Zm.22,8.69-1.39-3.43h4.56Zm4.77,2.85-3.08-1.27,3.08-3.39Zm0-10-3.08-3.17,3.08-1.36Zm7.08-1.56,1.17,3.18H159.1Zm-4.75-3,3.25,1.36-3.25,3.17Zm0,14.6V321l3.25,3.17Zm4.54-2.94-3.2-3.43H164Zm18.76-7.43-2.94,2.9,2.94,2.93,2.95-2.93Z" />
                <path d="M202.77,284.5h2.9v-2.86h-2.9ZM214,288.3l2,2,2-2-2-2Zm-15.31-19.17-2,2.06,2,2,2-2Zm27.8,15.37h2.89v-2.86h-2.89Zm-21-26.85h-2.88v2.87h2.88Zm24.12,0h-2.89v2.87h2.89ZM218,253.7l-2-2-2,2,2,2Zm14.26,21.77-1.85-4.42,1.85-4.17-3.38,3.51H223.4l2-3.08-3.53-.67,3.9-3.95h4.79l-4.4-1.6-1.66-4.38v4.86l-3.81,4-.59-3.77-3.17,2.15v-5.36l3.47-3.61L216.25,257l-4.33-1.9,3.46,3.45v5.36L212.16,262l-.53,3.56-3.9-4v-4.86l-1.51,4.38-4.53,1.74h4.87l3.88,3.81-4,.88,2.45,2.87h-5.51l-3.45-3.51,1.66,4.31-1.66,4.28,3.45-3.62h5.51l-2.45,3.2,4,.64-3.88,3.88h-4.87l4.53,1.56,1.45,4.34.06-4.79,3.75-3.74.68,3.87,3.22-2.41v5.53l-3.46,3.37,4.23-1.84,4.15,1.84-3.38-3.37V278.4l3.17,2.18.59-3.77,3.87,3.87.08,4.79,1.41-4.23,4.51-1.67h-4.79l-3.9-3.74,3.75-1.1-2.21-2.88h5.51Zm-20.37-7.27,2.36,2.19h-3.17Zm.16,6-1-2.37h3.17Zm3.3,2-2.14-.87,2.14-2.35Zm0-6.92-2.14-2.19,2.14-.95Zm4.92-1.07.82,2.19h-3.18Zm-3.3-2.07,2.26.95L217,269.27Zm0,10.15V273l2.26,2.2Zm3.17-2.06-2.23-2.37h3.39Zm13-5.15-2,2,2,2,2-2Z" />
                <path d="M174.34,228.42h2v-2h-2Zm7.93,2.69,1.44,1.43,1.44-1.43-1.44-1.43ZM171.5,217.62l-1.43,1.44,1.44,1.41,1.41-1.41Zm19.56,10.8h2v-2h-2Zm-14.8-18.89h-2v2h2Zm17,0h-2v2h2Zm-8.14-2.78-1.45-1.42-1.42,1.42,1.42,1.43Zm10,15.33-1.3-3.12,1.3-2.93-2.4,2.48h-3.86l1.39-2.18-2.49-.47,2.75-2.78h3.38l-3.1-1.13-1.17-3.07v3.41l-2.68,2.8-.41-2.66L184.3,214v-3.77l2.44-2.55-2.92,1.46-3-1.34,2.44,2.43V214L181,212.59l-.37,2.5-2.75-2.8v-3.41L176.76,212l-3.18,1.24H177l2.73,2.67-2.81.62,1.73,2h-3.88L172.33,216l1.18,3-1.18,3,2.45-2.56h3.88l-1.73,2.26,2.81.45L177,225h-3.43l3.18,1.08,1,3.06,0-3.37,2.64-2.63.48,2.73,2.27-1.69V228l-2.44,2.37,3-1.3,2.93,1.3L184.3,228v-3.89l2.23,1.53.41-2.67,2.73,2.73.07,3.37,1-3,3.17-1.17h-3.38l-2.75-2.63,2.66-.79-1.56-2h3.86ZM180.78,217l1.66,1.55h-2.23Zm.11,4.24-.68-1.68h2.23Zm2.33,1.39-1.5-.61,1.5-1.65Zm0-4.88-1.5-1.54,1.5-.66Zm3.46-.75.57,1.55H185Zm-2.33-1.45,1.59.66-1.59,1.54Zm0,7.13v-2.31l1.59,1.54Zm2.24-1.44L185,219.52h2.39Zm9.17-3.62-1.44,1.4,1.44,1.44,1.43-1.44Z" />
                <path d="M260.79,288.36h2.32v-2.29h-2.32Zm9.06,3.08,1.63,1.62,1.64-1.62-1.64-1.65ZM257.53,276l-1.62,1.65,1.63,1.6,1.64-1.6Zm22.33,12.34h2.33v-2.29h-2.33ZM263,266.78h-2.31v2.31H263Zm19.38,0H280v2.31h2.32ZM273,263.6,271.4,262l-1.63,1.61,1.63,1.65Zm11.46,17.51L283,277.56l1.49-3.36L281.78,277h-4.43l1.61-2.48L276.1,274l3.13-3.19h3.86l-3.53-1.27L278.22,266v3.9l-3.05,3.2-.47-3.05-2.55,1.74v-4.3l2.77-2.92-3.31,1.67-3.48-1.53,2.79,2.78v4.3l-2.59-1.55-.43,2.86-3.14-3.2V266l-1.21,3.52L259.91,271h3.9l3.13,3.07-3.21.71,2,2.31h-4.43l-2.77-2.84,1.33,3.47-1.33,3.44,2.77-2.9h4.43l-2,2.56,3.21.51-3.13,3.11h-3.9l3.64,1.26,1.17,3.5,0-3.85,3-3,.55,3.12,2.59-1.94v4.44l-2.79,2.71,3.41-1.49,3.32,1.49-2.71-2.71v-4.44l2.55,1.75.47-3.05,3.12,3.13.06,3.85,1.13-3.41,3.61-1.35h-3.86l-3.13-3,3-.87-1.78-2.31h4.43Zm-16.37-5.85L270,277h-2.55Zm.12,4.86-.77-1.91H270Zm2.67,1.58-1.73-.7,1.73-1.9Zm0-5.56-1.73-1.78,1.73-.75Zm3.94-.88.67,1.78H273Zm-2.64-1.65,1.81.75-1.81,1.78Zm0,8.16V279.1l1.81,1.77Zm2.53-1.65L273,278.21h2.74ZM285.22,276l-1.64,1.62,1.64,1.65,1.64-1.65Z" />
            </svg>
        ),
        transparency: (
            <svg
                id="Capa_1"
                data-name="Capa 1"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 400 400"
            >
                <circle cx="161.56" cy="223.88" r="92.35" />
                <path d="M233.7,278a97.1,97.1,0,1,1,97.09-97.09A97.21,97.21,0,0,1,233.7,278Zm0-184.71a87.62,87.62,0,1,0,87.62,87.62A87.72,87.72,0,0,0,233.7,93.24Z" />
                <path d="M280.69,134.72c9.56,6.65,23.54,22,21.89,54.55a3.45,3.45,0,0,1-6.64,1.14C291.76,180,285,163.06,275.51,138.8A3.45,3.45,0,0,1,280.69,134.72Z" />
            </svg>
        ),
        very_cloudy: (
            <svg
                id="Capa_1"
                data-name="Capa 1"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 400 400"
            >
                <path d="M340.39,181.74q.06-1,.06-2a34.9,34.9,0,0,0-51.66-30.6c-4-18.18-20.5-31.64-40.16-31.64l-2.14.06a40.77,40.77,0,0,0-36.73,27.13,50.85,50.85,0,0,0-39.1-15.4c-24.5,1.22-43.94,19.07-47.27,42A40.76,40.76,0,0,0,110,169,42.47,42.47,0,0,0,67.56,211.4c0,.44,0,.87,0,1.33C55.77,216,39,222.87,39,247c0,19.2,17,34.81,38,34.81l2,0c13-.67,66.92,0,66.93,0l0-.89.28,0,.05.84V281c7.16,1,23.76,1,62.37,1.08,0,0,29,.49,50.1.49,7.94,0,14.76-.07,18.53-.27,19.78-1,36.24-19.77,35.51-40.34h3.74c6.5,0,12.09-.07,15.15-.22a29.91,29.91,0,0,0,21.59-11.21A33.06,33.06,0,0,0,361,208C360.38,195.93,352.16,185.69,340.39,181.74Zm-38,60.17c.68,13.53-10.16,29.24-25.66,30-13.66.67-67.9-.25-68-.24-24.06-.05-60.55-.14-62.49-.22l-.13,2.36-.05-2.37s-24.92-.32-45.07-.32c-9.68,0-18.26.08-22.52.29l-1.49,0c-15.21,0-27.58-11-27.59-24.46,0-16.07,8.77-21.29,25-25.3l3.89-1.61.12-3.93-.2-1.95a21.57,21.57,0,0,1-.27-2.81,32.09,32.09,0,0,1,32.06-32,31.54,31.54,0,0,1,15.55,4.22l7.88,4.4-.16-9c-.36-21,16.3-38.29,37.92-39.36l2.12-.06a40.31,40.31,0,0,1,26.34,9.7,38.49,38.49,0,0,1,9.72,12.56A37.65,37.65,0,0,1,213,176.27c0,.74,0,1.47-.1,3.33l-.5,13.35,9.38-9.53a32,32,0,0,1,54.87,22.44,32.84,32.84,0,0,1-.65,6.4l-1,5.21,5.24.92a27.08,27.08,0,0,1,19.05,13.07,23.51,23.51,0,0,1,3.13,10.4Zm42.87-18a19.73,19.73,0,0,1-14.13,7.48c-3.86.19-11.79.23-20.41.19a36.43,36.43,0,0,0-23.83-22.19c.1-1.16.15-2.31.15-3.5a42.46,42.46,0,0,0-42.42-42.4,42,42,0,0,0-22,6.12,47.15,47.15,0,0,0-3.47-11.06c-.36-.82-.87-1.56-1.28-2.35.81-15.23,13.14-27.5,29.08-28.3l1.63,0c16.41,0,29.87,12.42,30.67,28.25,0,.59,0,1.17-.07,2.59l-.54,13.4,9.4-9.55a24.5,24.5,0,0,1,42,17.18,24.68,24.68,0,0,1-.49,4.9l-1,5.21,5.23.92c9.49,1.66,16.41,9,16.84,17.8A22.76,22.76,0,0,1,345.26,223.88Z" />
            </svg>
        ),
        wind_direction: (
            <svg
                id="Capa_1"
                data-name="Capa 1"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 400 400"
            >
                <polygon points="184.07 185.13 148.94 157.88 277.38 157.5 277.33 138.44 149.45 138.81 183.92 111.34 172.78 97.38 108.17 148.85 173.13 199.23 184.07 185.13" />
                <polygon points="227.2 200.69 216.07 214.67 250.54 242.16 122.69 241.81 122.62 260.87 251.06 261.25 215.94 288.51 226.88 302.62 291.83 252.22 227.2 200.69" />
            </svg>
        ),
        wind_speed: (
            <svg
                id="Capa_1"
                data-name="Capa 1"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 400 400"
            >
                <path d="M346.53,191.27c-6.24-5.87-14.94-7.7-22.27-4.65-7.72,3.21-12.24,9.62-12,17.11.14,6.27,3.59,11.84,8.33,13.54a9,9,0,0,0,10-2.94l-6.9-5.62c-.65-.21-2.19-2.21-2.31-5.13-.11-2.63,1-6.25,6.45-8.57,3.94-1.66,8.87-.53,12.5,2.87,4.91,4.65,6.21,12.1,3.44,20-4,11.36-13.11,9.64-36.3,2.31-24.33-7.73-57.67-18.31-85.56,8.38-8.16,7.81-26.1,11.37-48.1,9.41-18.38-1.61-37.55-5-53.26-18.36-16.46-14-32.58-19.54-45.27-21.47A67.48,67.48,0,0,1,115.58,205c22.12,11.21,48.74,21.78,70.74,21.78,12.49,0,23.48-3.42,31.29-12,17.23-19,37.87-16.88,56-15,16.19,1.69,32.92,3.36,38.64-14.87,3.11-9.93.92-19.2-5.95-25.49-7.19-6.56-18.59-8.71-27.11-5.13-9.69,4-10.57,10.65-10.49,13.31.14,5.45,4.08,10.58,9.56,12.57a11.23,11.23,0,0,0,12.59-3.13L284,171c-.32.34-.94,1.08-2.62.49-1.88-.66-3.5-2.59-3.54-4.22-.06-2.34,3.42-4,4.91-4.66,5.32-2.21,12.82-.74,17.43,3.46,3,2.73,6,7.73,3.41,16-3.34,10.69-11.82,10.3-29,8.54-18.31-1.85-43.36-4.46-63.67,18-18.67,20.58-65.1,1.48-91.14-11.76a76.61,76.61,0,0,0-29.54-8.27,60.52,60.52,0,0,1,29.26,6.26c18.5,9,34,11.61,46.53,11,18.28-.87,30.23-8.62,36-13.44,8.85-7.41,8.64-19.95,4-28-4.09-7-12.77-12.78-24.93-8.26a13,13,0,0,0-8.24,16.1c1.76,6,7.91,11.13,17.72,8.88l-1.62-7.22c-5.42,1.17-8.21-1.16-9-3.79a5.63,5.63,0,0,1,3.71-7c9.58-3.61,14.34,2.34,15.89,5.05,3.22,5.5,3.22,14-2.31,18.62-8.52,7.13-32.85,21.66-74.47,1.41s-76.65,9.31-77,9.62l.48.55-.48.28,4.34,7v.94c1.21-.34,34.11-5.06,64.55,20C132.5,241.32,153.11,245.25,173,247c4.22.38,8.31.54,12.25.54,19.19,0,34.49-4.35,42.95-12.45,24-22.94,51.92-14.05,76.51-6.26,19.86,6.26,40.37,12.82,47.66-8C356.32,209.52,354.16,198.43,346.53,191.27Z" />
            </svg>
        ),
    };

    const formattedDate = today.toLocaleDateString("en-US", options);

    function conditionalWeather(weather, daysTmp, hoursTmp) {
        let data = [];
        let iconsTmp = "";
        if (hoursTmp == null) {
            data = weather[daysTmp];
        } else {
            data = weather[daysTmp][hoursTmp];
        }

        let cloudCover = data["cloudcover"];
        let precipitationRate = data["prec_amount"];
        let precipitationType = data["prec_type"];
        let relativeHumidity = data["rh2m"];
        let liftedIndex = data["lifted_index"];
        var generalWeather = "";

        cloudCover = parseInt(cloudCover.split("%")[0].trim());
        precipitationRate = parseInt(precipitationRate);
        relativeHumidity = parseInt(relativeHumidity);
        liftedIndex = parseInt(liftedIndex.split(" ")[0].trim());

        // Total cloud cover less than 20% = Clear
        if (cloudCover <= 20) {
            generalWeather = "Clear";
            iconsTmp = icons.clear;
        }

        // Total cloud cover between 20%-60% = Cloudy
        if (cloudCover > 20 && cloudCover <= 80) {
            generalWeather = "Partly Cloudy";
            iconsTmp = icons.cloudy;
        }

        //cloud cover over 80%
        if (cloudCover >= 80) {
            generalWeather = "Very Cloudy";
            iconsTmp = icons.very_cloudy;
        }

        // Relative humidity over 90% with total cloud cover less than 60% = Foggy
        if (relativeHumidity > 90 && cloudCover <= 60) {
            generalWeather = "Foggy";
            iconsTmp = icons.very_cloudy;
        }

        // Precipitation rate less than 4mm/hr with cloud cover more than 80% = Light rain or showers
        if (
            precipitationRate < 4 &&
            cloudCover > 80 &&
            precipitationType == "rain"
        ) {
            generalWeather = "Light rain or showers";
            iconsTmp = icons.rain;
        }

        // Precipitation rate less than 4mm/hr with cloud cover between 60%-80% = Occasional Showers
        if (
            precipitationRate < 4 &&
            cloudCover > 60 &&
            cloudCover <= 80 &&
            precipitationType == "rain"
        ) {
            generalWeather = "Occasional Showers";
            iconsTmp = icons.rain;
        }

        // Precipitation rate less than 4mm/hr less than 60% = Isolated Showers
        if (
            precipitationRate < 4 &&
            cloudCover <= 60 &&
            precipitationType == "rain"
        ) {
            generalWeather = "Isolated Showers";
            iconsTmp = icons.rain;
        }

        // Precipitation rate over 4mm/hr = Rain
        if (precipitationRate >= 4 && precipitationType == "rain") {
            generalWeather = "Rain";
            iconsTmp = icons.rain;
        }

        // Precipitation rate over 4mm/hr = Snow
        if (precipitationRate >= 4 && precipitationType == "snow") {
            generalWeather = "Snow";
            iconsTmp = icons.snow;
        }

        // Precipitation type to be ice pellets or freezing rain = Mixed
        if (precipitationType == "icep" || precipitationType == "frzr") {
            generalWeather = "Mixed";
            iconsTmp = icons.mixed;
        }

        // Lifted Index less than -5 with precipitation rate below 4mm/hr = Thunderstorm possible
        if (liftedIndex < -5 && precipitationRate < 4) {
            generalWeather = "Thunderstorm possible";
            iconsTmp = icons.atm_instability;
        }

        // Lifted Index less than -5 with precipitation rate over 4mm/hr = Thunderstorm
        if (liftedIndex < -5 && precipitationRate >= 4) {
            generalWeather = "Thunderstorm";
            iconsTmp = icons.atm_instability;
        }

        // Lifted index less than -5 with precipitation type rain = Thunderstorm with rain
        if (liftedIndex < -5 && precipitationType == "rain") {
            generalWeather = "Thunderstorm with rain";
            iconsTmp = icons.atm_instability;
        }

        //Precipitation type to be snow
        if (precipitationType == "snow") {
            generalWeather = "Snow";
            iconsTmp = icons.snow;
        }

        //Precipitation type to be rain
        if (precipitationType == "rain") {
            generalWeather = "rain";
            iconsTmp = icons.rain;
        }

        return {
            generalWeather: generalWeather,
            icons: iconsTmp,
        };
    }

    const determineWeather = (weather) => {
        var daysTmp = Object.keys(weather);
        let hoursTmp = Object.keys(weather[daysTmp[0]]);
        let generalWeatherTmp = [];
        let weatherTmp = [];
        let iconsTmp = [];

        generalWeatherTmp[0] = conditionalWeather(
            weather,
            daysTmp[0],
            hoursTmp
        ).generalWeather;
        generalWeatherTmp[1] = conditionalWeather(
            weather,
            daysTmp[1],
            null
        ).generalWeather;
        generalWeatherTmp[2] = conditionalWeather(
            weather,
            daysTmp[2],
            null
        ).generalWeather;

        iconsTmp[0] = conditionalWeather(weather, daysTmp[0], hoursTmp).icons;
        iconsTmp[1] = conditionalWeather(weather, daysTmp[1], null).icons;
        iconsTmp[2] = conditionalWeather(weather, daysTmp[2], null).icons;

        setDays(daysTmp);
        setHour(hoursTmp[0]);
        console.log(iconsTmp);

        setIconsDays(iconsTmp);
        setGeneralWeather(generalWeatherTmp);
        setWeather(weather);
    };

    const fetchData = async () => {
        try {
            const mapResponse = await axios.get(
                `${import.meta.env.VITE_API_URL}/map`
            );
            if (!mapResponse.data) throw new Error("Map is empty");
            const mapData = await mapResponse.data;
            setCity(mapData.city);
            setCountry(mapData.country);
            console.log(mapData);

            const cityResponse = await axios.post(
                `${import.meta.env.VITE_API_URL}/city`,
                { city: mapData.city, country: mapData.country }
            );

            if (!cityResponse.data) throw new Error("City data is empty");
            const cityData = await cityResponse.data;

            const astroResponse = await axios.post(
                `${import.meta.env.VITE_API_URL}/astro`,
                {
                    lat: cityData.lat,
                    lng: cityData.lng,
                }
            );

            if (!astroResponse.data) throw new Error("Astro data is empty");
            const astroData = await astroResponse.data;

            const astroTranslationResponse = await axios.post(
                `${import.meta.env.VITE_API_URL}/translate_astro`,
                { astro: astroData }
            );
            if (!astroTranslationResponse.data)
                throw new Error("Astro data is empty");
            const astroTranslated = await astroTranslationResponse.data;

            const meteoResponse = await axios.post(
                `${import.meta.env.VITE_API_URL}/meteo`,
                {
                    lat: cityData.lat,
                    lng: cityData.lng,
                }
            );
            if (!meteoResponse.data) throw new Error("Meteo data is empty");
            const meteoData = await meteoResponse.data;

            const meteoTranslatedResponse = await axios.post(
                `${import.meta.env.VITE_API_URL}/translate_meteo`,
                { meteo: meteoData }
            );
            if (!meteoTranslatedResponse.data)
                throw new Error("Meteo data is empty");
            const meteoTranslated = await meteoTranslatedResponse.data;

            const translateWeatherResponse = await axios.post(
                `${import.meta.env.VITE_API_URL}/merge_translations`,
                {
                    astro: astroTranslated,
                    meteo: meteoTranslated,
                }
            );

            if (!translateWeatherResponse.data)
                throw new Error("Weather data is empty");
            determineWeather(translateWeatherResponse.data);
        } catch (err) {
            console.log(err);
        } finally {
            setLoading(false);
        }
    };

    const fectchDataBySearch = async (city, country) => {
        try {
            setLoading(true);

            setCity(city);
            setCountry(country);

            const cityResponse = await axios.post(
                `${import.meta.env.VITE_API_URL}/city`,
                { city: city, country: country }
            );
            if (!cityResponse.data) throw new Error("City data is empty");
            const cityData = await cityResponse.data;

            const astroResponse = await axios.post(
                `${import.meta.env.VITE_API_URL}/astro`,
                {
                    lat: cityData.lat,
                    lng: cityData.lng,
                }
            );

            if (!astroResponse.data) throw new Error("Astro data is empty");
            const astroData = await astroResponse.data;

            const astroTranslationResponse = await axios.post(
                `${import.meta.env.VITE_API_URL}/translate_astro`,
                { astro: astroData }
            );
            if (!astroTranslationResponse.data)
                throw new Error("Astro data is empty");
            const astroTranslated = await astroTranslationResponse.data;

            const meteoResponse = await axios.post(
                `${import.meta.env.VITE_API_URL}/meteo`,
                {
                    lat: cityData.lat,
                    lng: cityData.lng,
                }
            );
            if (!meteoResponse.data) throw new Error("Meteo data is empty");
            const meteoData = await meteoResponse.data;

            const meteoTranslatedResponse = await axios.post(
                `${import.meta.env.VITE_API_URL}/translate_meteo`,
                { meteo: meteoData }
            );
            if (!meteoTranslatedResponse.data)
                throw new Error("Meteo data is empty");
            const meteoTranslated = await meteoTranslatedResponse.data;

            const translateWeatherResponse = await axios.post(
                `${import.meta.env.VITE_API_URL}/merge_translations`,
                {
                    astro: astroTranslated,
                    meteo: meteoTranslated,
                }
            );

            if (!translateWeatherResponse.data)
                throw new Error("Weather data is empty");
            determineWeather(translateWeatherResponse.data);
        } catch (err) {
            console.log(err);
        } finally {
            setLoading(false);
        }
    };

    const validateQueryParam = (queryParam) => {
        const infiltratedParams = queryParam.split("&&");
        if (infiltratedParams.length > 1) return false;
        else return true;
    };

    const validate = (city, country) => {
        if (city == "" || country == "") {
            return false;
        }

        let isValid = validateQueryParam(city);
        isValid = validateQueryParam(country);
        if (!isValid) {
            return false;
        }

        fectchDataBySearch(city, country);
    };

    useEffect(() => {
        let timer = setTimeout(() => {
            setLoading(true);
        }, 2000);

        fetchData();

        return () => {
            clearTimeout(timer);
        };
    }, []);

    return loading ? (
        <div className="center-container">
            <div className="loader"></div>
        </div>
    ) : (
        <div className="antialiased min-h-screen bg-gray-100 flex items-center">
            <div className="customCenter w-full max-w-sm mx-auto mt-5 mb-5">
                {/* Search Bar */}
                <div className="flex items-center mb-2">
                    <div className="relative w-full flex">
                        <input
                            type="text"
                            className="bg-white border text-black text-sm rounded-lg flex w-1/2 p-2.5"
                            placeholder="City"
                            onChange={(e) => {
                                setCityInput(e.target.value);
                            }}
                        />
                        <input
                            type="text"
                            className="bg-white border text-black text-sm rounded-lg flex w-1/2 p-2.5"
                            placeholder="Country"
                            onChange={(e) => {
                                setCountryInput(e.target.value);
                            }}
                        />
                    </div>
                    <button
                        className="inline-flex items-center py-2.5 px-3 ml-2 text-sm font-medium text-white bg-black rounded-lg border hover:bg-white hover:text-black"
                        onClick={() => validate(cityInput, countryInput)}
                    >
                        <svg
                            className="w-5 h-5"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth="2"
                                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                            ></path>
                        </svg>
                    </button>
                </div>
                {/* Weather Card */}
                <div className="bg-white shadow rounded-lg p-5 w-full border-solid">
                    <h2 className="font-bold text-gray-800 text-lg">
                        {formattedDate}
                    </h2>
                    <div>
                        <div className="flex mt-4 mb-2">
                            <div className="flex-1">
                                <div className="text-gray-600 text-sm">
                                    {city}, {country}
                                </div>
                                <div className="text-3xl font-extrabold text-gray-800">
                                    {weather[days[0]]?.[hour]["temp2m"] + "°C"}
                                </div>
                                <div className="text-xs text-gray-600 font-semibold">
                                    {generalWeather[0]}
                                </div>
                            </div>
                            <div className="w-24">{iconsDays[0]}</div>
                        </div>
                        <div className="flex space-x-2 justify-between border-t dark:border-gray-500">
                            <div className="flex-1 text-center pt-4 border-r px-5 dark:border-gray-500">
                                <div className="">{days[1]}</div>
                                <div className="">{iconsDays[1]}</div>
                                <div className="font-bold">
                                    {weather[days[1]]?.["temp2m"] + "°C"}
                                </div>
                                <div>{generalWeather[1]}</div>
                            </div>
                            <div className="flex-1 text-center pt-4 px-5">
                                <div className="">{days[2]}</div>
                                <div className="">{iconsDays[2]}</div>
                                <div className="font-bold">
                                    {weather[days[1]]?.["temp2m"] + "°C"}
                                </div>
                                <div>{generalWeather[2]}</div>
                            </div>
                        </div>
                    </div>
                </div>
                {/* First Row */}
                <div className="flex flex-row">
                    <div className="bg-white shadow rounded-lg p-5 w-1/2 border-solid mt-2 mr-2 text-center">
                        <h1 className="font-bold text-gray-800">Cloud Cover</h1>
                        {icons.very_cloudy}
                        <h2 className="font-bold">
                            {weather[days[0]]?.[hour]["cloudcover"]}
                        </h2>
                    </div>
                    <div className="bg-white shadow rounded-lg p-5 w-1/2 border-solid mt-2 text-center">
                        <h1 className="font-bold text-gray-800">Atm Seeing</h1>
                        {icons.atm_seeing}
                        <h2 className="font-bold">
                            {weather[days[0]]?.[hour]["seeing"]}
                        </h2>
                    </div>
                </div>
                {/* Second Row */}
                <div className="flex flex-row">
                    <div className="bg-white shadow rounded-lg p-5 w-1/2 border-solid mt-2 mr-2 text-center">
                        <h1 className="font-bold text-gray-800">
                            Transparency
                        </h1>
                        {icons.transparency}
                        <h2 className="font-bold">
                            {weather[days[0]]?.[hour]["transparency"]}
                        </h2>
                    </div>
                    <div className="bg-white shadow rounded-lg p-5 w-1/2 border-solid mt-2 text-center">
                        <h1 className="font-bold text-gray-800">Instability</h1>
                        {icons.atm_instability}
                        <h2 className="font-bold">
                            {weather[days[0]]?.[hour]["lifted_index"]}
                        </h2>
                    </div>
                </div>

                {/* Third row */}
                <div className="flex flex-row">
                    <div className="bg-white shadow rounded-lg p-5 w-1/2 border-solid mt-2 mr-2 text-center">
                        <h1 className="font-bold text-gray-800">Wind Speed</h1>
                        {icons.wind_speed}
                        <h2 className="font-bold">
                            {weather[days[0]]?.[hour]["wind10m_speed"]}
                        </h2>
                    </div>
                    <div className="bg-white shadow rounded-lg p-5 w-1/2 border-solid mt-2 text-center">
                        <h1 className="font-bold text-gray-800">Direction</h1>
                        {icons.wind_direction}
                        <h2 className="font-bold">
                            {weather[days[0]]?.[hour]["wind10m_direction"]}
                        </h2>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Home;
